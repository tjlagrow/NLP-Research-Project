Controlled Natural Language Processing as
Answer Set Programming an Experiment
Rolf Schwitter
Department of Computing
Macquarie University
Sydney NSW 2109 Australia
RolfSchwittermqeduau
Abstract Most controlled natural languages CNLs are processed with
the help of a pipeline architecture that relies on dierent software com-
ponents We investigate in this paper in an experimental way how well
answer set programming ASP is suited as a unifying framework for
parsing a CNL deriving a formal representation for the resulting syntax
trees and for reasoning with that representation We start from a list
of input tokens in ASP notation and show how this input can be trans-
formed into a syntax tree using an ASP grammar and then into reied
ASP rules in form of a set of facts These facts are then processed by an
ASP meta-interpreter that allows us to infer new knowledge
Keywords Answer Set Programming Controlled Natural Language
Processing Meta-programming
Introduction
Controlled natural languages CNLs are subsets of natural languages whose
grammars and vocabularies have been restricted in order to eliminate ambiguity
and complexity of natural languages for automated reasoning 1117 These
CNLs are engineered for a specic purpose and look seemingly informal like
natural languages but they have by design the same properties as their formal
target languages Typically the writing process of a CNL is supported by an
authoring tool that guides the writing of a text or a question by a feedback
mechanism 4101416
Most existing CNLs are processed with the help of a pipeline architecture
that relies on dierent software components for parsing and translating the CNL
input into a formal representation before this representation can be processed by
an automated reasoning service 25 In this paper we investigate in an experi-
mental way whether answer set programming ASP can be used as a unifying
framework for CNL processing knowledge representation and automated rea-
soning After a brief introduction to the ASP paradigm in Section 2 we show
in Section 3 how grammar rules for a CNL can be written in ASP and how
CNL sentences can be parsed into a syntax tree In Section 4 we discuss how a
formal representation can be generated for these syntax trees In Section 5 we
Rolf Schwitter
illustrate how this representation can be used for reasoning in ASP with the help
of a meta-interpreter In Section 6 we summarise our ndings and conclude
2 Answer Set Programming ASP
ASP is a form of declarative programming that has its roots in logic program-
ming disjunctive databases and non-monotonic reasoning 113 ASP provides
an expressive formal language for knowledge representation and automated rea-
soning and is based on the answer set semantics for logic programs 78 In ASP
problems are represented in terms of nite logic theories and these problems are
solved by reducing them to nding answer sets which declaratively describe the
solutions to these problems An ASP program consists of a set of rules of the
h1  hm - b1 bn not bn1 not bo
where hi and bi are classical literals li A classical literal l is either an atom
a or a negated atom -a A literal of the form not l is a negation as failure literal
The disjunction  is interpreted as epistemic disjunction 9 The part on the
left of the implication - is the head of the rule and the part on the right is the
body of the rule If the body is empty o0 then we omit the symbol for the
implication and end up with a fact If the head is empty m0 then we keep the
symbol for the implication and end up with an integrity constraint Note that
ASP distinguishes between strong negation - and weak negation not these
two forms of negation build the prerequisites for non-monotonic reasoning 9
For example the ASP program in 2 consists of two rules six facts and one
integrity constraint
2 successfulX - studentX workX not absentX
-workX - studentX not workX
studentjohn workjohn studentsue worksue
studentmaryann absentmaryann
- studentX cheatX successfulX
This program can be processed by an ASP tool such as clingo 6 that computes
the following answer set
3  studentjohn workjohn studentsue worksue studentmaryann
absentmaryann successfulsue successfuljohn -workmaryann 
We call an ASP program satisable if it has at least one answer set Through
inspection of the above answer set we can immediately see that John and Sue
are successful and that Mary Ann does not work Note that the second rule in
2 species the closed world assumption 15 for the literal work1 If we add
the following facts to our program
4 studentray workray cheatray
then we end up with an unsatisable program since the situation in 4 is ex-
cluded by the constraint in 2
CNL Processing as Answer Set Programming an Experiment
3 Writing a CNL Grammar in ASP
The CNL that we will use in the following discussion is similar to Processable
English PENG 18 and to Attempto Controlled English ACE 5 but the lan-
guage is less expressive since ASP does not support full rst-order logic FOL
However ASP is still expressive enough to represent function-free FOL formulas
of the  prex class in form of a logic program 12 The following text 5 is
written in CNL and expresses the same information as the ASP program in 2
5 Every student who works and who is not provably absent is successful
If a student does not provably work then the student does not work
John is a student who works
Sue is a student and works
Mary Ann who is a student is absent
Exclude that a student who cheats is successful
In order to process this text in ASP we split it into a sequence of sentences
and each sentence into a sequence of tokens Each token is represented in ASP
as a fact token4 with four arguments the rst argument holds the string the
second argument holds the sentence number and the third and fourth argument
represent the start and the end position of the string for example
6 tokenEvery 1 1 2 tokenstudent 1 2 3
Each string is stored as a fact lexicon5 in the ASP lexicon that distin-
guishes between function words and content words Function words eg and
every who dene the structure of the CNL and content words eg student
works successful are used to express the domain knowledge These lexical en-
tries contain information about the category the string the base form as well
as syntactic and semantic constraints n stands for nil
7 lexiconcnj and n n n
lexicondet Every n sg forall
lexiconrp who n n n
lexiconnoun student student sg n
lexiconiv works work sg n
lexiconadj successful successful n n
We can write the grammar for the CNL directly as a set of ASP rules that
generate a syntax tree bottom-up starting from the tokens up to the root Let
us have a look at the grammar rules that process the rst sentence in 5 This
sentence is interesting since it contains a coordinated relative clause that is em-
bedded in the main sentence The rst relative clause who works is positive and
the second relative clause who is not provably absent contains a weak negation
It is important to note that this form of negation can only occur in a univer-
sally quantied CNL sentence or in a CNL sentence that results in an integrity
constraint
The grammar rule rule7 species in a declarative way that a sentence s
starts at position P1 and ends at position P4 if there is a noun phrase np that
starts at P1 and ends at P2 followed by a verb phrase vp that starts at P2 and
ends at P3 followed by a punctuation mark pm between position P3 and P4
Rolf Schwitter
8 rules sT1 T2 T3 n n N P1 P4
rulenp T1 Y n N P1 P2
rulevp T2 Y n N P2 P3
rulepm T3 n n N P3 P4
The second argument position of this rule is used to build up a syntax tree
the third argument position is used for syntactic constraints the fourth for
semantic constraints and the fth for the sentence number The variable Y in
8 is used to enforce number agreement between the np and the vp
The following grammar rule in 9 further describes the noun phrase of our
example sentence This noun phrase np consists of a determiner det followed
by a nominal expression n1 The variable M holds a quantier that controls 
as we will see later  the use of weak negation in our example sentence
9 rulenp npT1 T2 Y n N P1 P3 -
ruledet T1 Y M N P1 P2
rulen1 T2 Y M N P2 P3
The nominal expression n1 expands in our case into a noun noun and a
relative clause rcl
10 rulen1 n1T1 T2 Y M N P1 P3 -
rulenoun T1 Y n
rulercl T2 Y M N P2 P3
N P1 P2
The noun noun is a preterminal category and processes the input token
token4 with the help of the lexical information lexicon5
11 rulenoun nounS Y n N P1 P2 -
tokenS N P1 P2
lexiconnoun S B Y n
Note that the relative clause in our example sentence is coordinated and
consists of a positive and a negative part The grammar rule in 12 for relative
clauses rcl deals with this coordinated structure In contrast to the positive
part we use the variable M in the negative part of the coordinated structure to
enforce that this form of negation occurs under universal quantication addi-
tional grammar rules exist that deal with relative clauses where the order of the
positive and negative part is dierent
12 rulercl rclT1 T2 T3 Y M N P1 P4 -
rulercl T1 Y n N P1 P2
rulecnj T2 n n N P2 P3
rulercl T3 Y M N P3 P4
As the following two grammar rules in 13 illustrate the relative clause
expands in both cases into a relative pronoun rp followed by a verb phrase
vp the rst vp occurs without a variable n at the fourth argument position
and the second vp occurs with a variable M that holds the quantier
13 rulercl rclT1 T2 Y n N P1 P3 -
rulerp T1 n n N P1 P2
rulevp T2 Y n N P2 P3
CNL Processing as Answer Set Programming an Experiment
rulercl rclT1 T2 Y M N P1 P3 -
rulerp T1 n n N P1 P2
rulevp T2 Y M N P2 P3
The rst verb phrase vp in 13 expands into an intransitive verb iv
14 rulevp vpT1 Y n N P1 P2 -
ruleiv T1 Y n N P1 P2
and the second verb phrase vp expands into a copula cop followed by a weak
negation naf and an adjective adj
15 rulevp vpT1 T2 T3 Y M N P1 P4 -
rulecop T1 Y n N P1 P2
rulenaf T2 n M N P2 P3
ruleadj T3 n n N P3 P4
As we have seen weak negation is expressed on the surface level of the CNL
with the help of the key phrase not provably The rule naf in 16 processes
this key phrase if it occurs in the scope of a universal quantier forall
16 rulenaf nafT1 advprovably n forall N P1 P3 -
ruleneg T1 n n N P1 P2
ruleadv advprovably n n N P2 P3
We still have to deal with the verb phrase vp on the sentence level that is
part of rule 8 This verb phrase expands into a copula cop followed by an
adjective adj
17 rulevp vpT1 T2 Y n N P1 P3 -
rulecop T1 Y n N P1 P2
ruleadj T2 n n N P2 P3
In ASP these grammar rules are processed bottom-up and during this model
generation process the following syntax tree is produced for our example sen-
18 snpdetEvery
n1nounstudent
rclrclrpwho
vpivworks
cnjand
rclrpwho
vpcopis
nafnegnot
advprovably
adjabsent
vpcopis
adjsuccessful
pm
Rolf Schwitter
This syntax tree needs to be translated into a suitable ASP representation for
automated reasoning as we will see in Section 4
Before we do this please note that it is relatively straightforward to generate
look-ahead information that informs the author about the admissible input To
generate look-ahead information we add one or more dummy tokens that contain
a special string lah to the last input token for example
19 tokenEvery 1 1 2
tokenstudent 1 2 3
tokenlah 1 3 4
Additionally we add for each category a lexical entry that contains this special
string for example
20 lexiconiv lah n sg n
The following ASP rules in 21 are then used to collect those syntax tree
fragments that span the input string and contain look-ahead information The
last rule in 21 is a constraint and makes sure that the entire input string is
considered
21 lahC T Y M N 1 P2 -
ruleC T Y M N 1 P2
endposP2 N
lahC T Y M N 1 P2
endposP2 N
-endposP2 N1 -
tokenlah N1 P1 P2
tokenlah N2 P3 P4
N1  N2 P2  P4
endposP2 N -
tokenlah N P1 P2
not -endposP2 N
- not lah
In our example the addition of the rst token tokenlah 1 3 4
in 19 results in an unsatisable program The addition of a further token
tokenlah 1 4 5 results in two tree fragments that span the input
string From these trees we can extract the relevant look-ahead information
4 From Syntax Trees to Reied ASP Rules
We choose an indirect encoding for ASP rules where rules are reied as facts This
kind of encoding is necessary since there exists no mechanism within ASP that
would allow us to assert new rules The reied rules are then further processed
CNL Processing as Answer Set Programming an Experiment
by an ASP meta-interpreter as we will see in Section 5 A reied rule consists
of up to four dierent fact types a fact type rule1 for the identication of
the rule a fact type head2 for the head of the rule a fact type pbl2 for
positive body literals if any and a fact type nbl2 for negative body literals
if any For example the translation of the syntax tree in 18 will result in the
following encoding
22 rule1
head1 litfuncsuccessful argsk1
pbl1 litfuncwork argsk1
pbl1 litfuncstudent argsk1
nbl1 litfuncabsent argsk1
The fact type rule1 stores the rule number 1 This rule number occurs as
rst argument in the other fact types and species rule membership The actual
literals that belong to a rule are encoded with the help of the term lit2 where
the rst argument eg funcsuccessful is the functor name of the literal and
the second argument argsk1 represents a Skolem constant1 that replaces
the variable in the literal Note that all facts that have been derived from rules
need to be grounded and cannot contain any variables
In the following we will show in detail how the syntax tree in 18 is trans-
lated into the proposed ASP notation for rules in 22 The syntax tree is rst
split into three main parts a part to qnt3 to be translated into a quantier a
part to body3 to be translated into a rule body and a part to head3 to be
translated into a rule head In our case these parts correspond to the determiner
det the nominal expression n1 and the verb phrase vp of the rst sentence
in 5
23 toqntN detEvery M -
ruledet detEvery Y M N P1 P2
rulen1 T2 Y M N P2 P3
rulevp T3 Y n N P3 P4
tobodyN T2 M -
ruledet detEvery Y M N P1 P2
rulen1 T2 Y M N P2 P3
rulevp T3 Y n N P3 P4
toheadN T3 M -
ruledet detEvery Y M N P1 P2
rulen1 T2 Y M N P2 P3
rulevp T3 Y n N P3 P4
In the next step the determiner Every is processed and this results in a
new predicate qnt4 that stores a rule number R the universal quantier M
the sentence number N and a Skolem constant K for the universal quantier
Note that the rule number and the number for the Skolem constant are generated
with the help of Lua2 and assigned  to the variables R and K
1 The number i in ski represents the i th Skolem constant
2 Lua httpwwwluaorg is available as integrated scripting language in clingo
Rolf Schwitter
24 qntR M N skK -
toqntN detEvery M
R  rulenum
K  sknum
Given the new predicate qnt4 for the universal quantier the syntax tree
fragments for constructing the head of a rule and the body of a rule can be
further split up
25 toheadR adjS2 K
toheadN vpcopS1 adjS2 M
qntR forall N K
tobodyR nounS K
tobodyN n1nounS RCL M
qntR forall N K
tobodyR RCL K
tobodyN n1nounS RCL M
qntR forall N K
In the case of the head to head3 this process results in a preterminal
category adjS2 that can be used to generate the head literal of the rule
In the case of the body to body3 only the rst rule generates a preterminal
category nounS that can directly be used to generate a positive body literal
The second rule is used to split the relative clause RCL into its basic constituents
in order to extract the relevant preterminal categories
26 tobodyR RCL1 K
tobodyR rclRCL1 cnjand RCL2 K
tobodyR RCL2 K -
tobodyR rclRCL1 cnjand RCL2 K
tobodyR ivS2 K -
tobodyR rclrpS1 vpivS2 K
tobodyR nafadjS3 K
tobodyR rclrpS1 vpcopS2 nafT1 T2 adjS3 K
The preterminal categories for content words together with the Skolem con-
stant K and the rule number R are then used to generate the head literal the
positive and negative body literals During this process the string S of these
preterminal categories is replaced by the base form B via a lexicon lookup The
rule identier rule1 is generated with the help of the head literal head2
27 ruleR - headR L
headR litfuncB argK -
toheadR adjB K
lexiconadj S B  
CNL Processing as Answer Set Programming an Experiment
pblR litfuncB argK -
tobodyR nounS K
lexiconnoun S B  
pblR litfuncB argK -
tobodyR ivS K
lexiconiv S B  
nblR litfuncB argK -
tobodyR nafadjS K
lexiconadj S B  
Note that checking for anaphoric references can be done over the existing
model during the translation process of the syntax tree into rules For example
the second sentence of 5 contains a denite noun phrase the student that is
anaphorically linked to an indenite noun phrase a student Depending on the
context in which an anaphoric expression occurs we either check the body of
the current rule for an antecedent or the heads of all existing rules that dont
have a body and give preference to the closest match in terms of rule numbers
5 Reasoning with Reied ASP Rules
In order to process these reied ASP rules we use a meta-interpreter that is
based on the work of Eiter et al 3 We substantially extended this meta-
interpreter so that it can deal with variables that occur as Skolem constants
in the reied notation On the meta-level we represent answer sets with the help
of the predicate in AS1 and use the following two rules to add literals to an
answer set
28 inASlitF A2 -
headR litF A1
posbodytrueR A1 A2
not negbodyfalseR A1 A2
inASlitF A -
headR litF A
ruleR
not posbodyexistsR
The rst rule species that a literal lit2 is in an answer set in AS1
if it occurs in the head head2 of a rule with number R whose positive body
pos body true3 is true and whose negative body neg body false3 is not false
and if the Skolem constant that occurs as argument A1 of that literal can be
replaced by other constants that occur as argument A2 of a corresponding
literal in the answer set The second rule species that if no positive body literal
pbl3 for a rule exists then we can directly process the head head2 of a rule
The positive body pos body true3 of the rst rule in 28 is true up to
some positive body literal with respect to a built-in order If the positive body
Rolf Schwitter
is true up to the last positive body literal then the whole positive body is true
The rst rule in 29 deals with this case the second rule takes care of the rst
positive body literal and the third rule makes sure that the positive body literals
follow the specied order
29 posbodytrueR A1 A2 -
posbodytrueuptoR F A1 A2
not pblnotlastR F
posbodytrueuptoR F A1 A2 -
pblinASR F A1 A2
not pblnotfirstR F
posbodytrueuptoR F1 A1 A2 -
pblinASR F1 A1 A2
F2  F1
not pblinbetweenR F2 F1
posbodytrueuptoR F2 A1 A2
The rule pbl in AS4 in 30 checks if a positive body literal pbl2 for a
rule R exists looks in the current answer set in AS1 for a literal that has the
same functor name F as the body literal but shows a dierent argument A2
and returns that argument
30 pblinASR F A1 A2 -
pblR litF A1
inASlitF A2
A1  A2
There exist similar rules that deal with cases where the positive body literal
has more than one argument The successor relation on positive body literals of
each rule is dened with the help of the following auxiliary rules
31 pblinbetweenR F1 F3 -
pblR litF1 A1
pblR litF2 A2
pblR litF3 A3
F1  F2 F2  F3
pblnotlastR F1 -
pblR litF1 A1
pblR litF2 A2
F1  F2
pblnotfirstR F1 -
pblR litF1 A1
pblR litF2 A2
F2  F1
The negative part of the body neg body false3 in the rst rule of 28 is
false if it can be shown that one of its literals is in the answer set in AS1
The rule in 32 checks this condition for literals with one argument other rules
deal with literals that have more than one argument
CNL Processing as Answer Set Programming an Experiment
32 negbodyfalseR A1 A2 -
nblR litF A1
inASlitF A2
Finally the rule pos body exists1 in 33 is used as part of the second rule
in 28 and simply checks if a positive body literal pbl2 exists
33 posbodyexistsR - pblR L
After parsing and translating the CNL text in 5 into reied rules repre-
sented as a set of facts the ASP meta-interpreter will generate the following
answer set as solution
34  inASlitfuncstudent argjohn
inASlitfuncwork argjohn
inASlitfuncstudent argsue
inASlitfuncwork argsue
inASlitfuncstudent argmaryann
inASlitfuncabsent argmaryann
inASlitfuncsuccessful argsue
inASlitfuncsuccessful argjohn
inASlitfuncnegwork argmaryann 
This answer set contains the same information as the answer set in 3 and can
be used for question answering
6 Conclusion
In this paper we investigated in an experimental way if it is possible to process
a controlled natural language entirely in ASP and if ASP can serve as a uni-
ed framework for parsing knowledge representation and automated reasoning
ASP is a powerful declarative knowledge representation language that provides
support for non-monotonic reasoning and this makes the language particularly
attractive for controlled natural language processing We showed in detail how a
grammar for a controlled natural language can be written as an ASP program
This grammar is processed bottom-up and the syntax trees are constructed start-
ing from the leaves up to the root The resulting syntax trees are translated into
reied rules that consist of a set of facts These facts are then used by a meta-
interpreter written in ASP for automated reasoning The translation into reied
rules is necessary because ASP does not provide a mechanism that would allow
us to generate and assert normal ASP rules in the same program Alternatively
we could take the resulting syntax trees and translate them outside of the ASP
program into normal ASP rules and then generate a new ASP program that
executes these rules With the help of the presented ASP grammar it is possible
to generate look-ahead information to guide the writing process of the author
It is also possible in ASP to perform anaphora resolution over the reied rules
during the translation process using the standard constraints on anaphoric ac-
cessibility We believe that ASP is an interesting paradigm for controlled natural
language processing and plan to extend the presented approach or aspects of it
and integrate them into a controlled language authoring system
Rolf Schwitter
References
1 Brewka G Eiter T and Truszczynski M Answer Set Programming at a Glance
In Communications of the ACM Vol 54 No 12 December 2011
2 Clark P Harrison P Jenkins T Thompson J and Wojcik RH Acquiring
and using world knowledge using a restricted subset of English In Proceedings of
FLAIRS 2005 AAAI Press pp 506511 2005
3 Eiter T Faber W Leone N and Pfeifer G Computing Preferred Answer Sets
by Meta-Interpretation in Answer Set Programming in INFSYS Research Report
1843-02-01 Technische Universitat Wien January 2002
4 Franconi E Guagliardo P Trevisan M and Tessaris S Quelo an ontology-driven
query interface In Proceedings of the 24th International Workshop on Description
Logics DL 2011 2011
5 Fuchs NE Kaljurand K and Kuhn T Attempto Controlled English for knowl-
edge representation In Reasoning Web  4th International Summer School 2008
LNCS 5224 Springer pp 104124 2008
6 Gebser M Kaminski R Kaufmann B Ostrowski M Schaub T and Schneider
M Potassco The Potsdam Answer Set Solving Collection In AI Communications
Vol 24 No 2 pp 105124 2011
7 Gelfond M and Lifschitz V The stable model semantics for logic programming
In Proceedings of ICLP-88 pp 10701080 1988
8 Gelfond M and Lifschitz V Classical negation in logic programs and disjunctive
databases In New Generation Computing Vol 9 No 34 pp 365386 1991
9 Gelfond M and Kahl Y Knowledge Representation Reasoning and the Design
of Intelligent Agents Cambridge University Press 2014
10 Kuhn T Controlled English for Knowledge Representation Doctoral thesis Fac-
ulty of Economics Business Administration and Information Technology of the Uni-
versity of Zurich 2010
11 Kuhn T A Survey and Classication of Controlled Natural Languages In Com-
putational Linguistics Vol 40 No 1 pp 121170 2014
12 Lierler Y and Lifschitz V Logic Programs vs First-Order Formulas in Textual
Inference In Proceedings of the 10th International Conference on Computational
Semantics IWCS 2013 Potsdam Germany pp 340346 2013
13 Lifschitz V What is Answer Set Programming In Proceedings of AAAI 2008
pp 15941597 2008
14 Power R OWL Simplied English a nite-state language for ontology editing
In Kuhn T and Fuchs NE eds Proceedings of CNL 2012 Zurich Springer
Heidelberg pp 4460 2012
15 Reiter R On closed world data bases In Gallaire H and J Minker J eds
Logic and Data Bases pp 119140 Plenum Publ Co New York 1978
16 Schwitter R Ljungberg A and Hood D ECOLE  A Look-ahead Editor for a
Controlled Language In Proceedings of EAMT-CLAW03 May 15-17 Dublin City
University Ireland pp 141150 2003
17 Schwitter R Controlled Natural Languages for Knowledge Representation In
Proceedings of COLING 2010 Beijing China pp 11131121 2010
18 White C and Schwitter R An Update on PENG Light In L Pizzato and R
Schwitter eds Proceedings of ALTA 2009 Sydney Australia pp 8088 2009
