Computational Representation of Linguistic
Structures using Domain-Specic Languages
Fabian Steeg1 Christoph Benden2  Paul O Samuelsdor3
1 Computer Science for the Humanities University of Cologne
2 German Institute of Medical Documentation and Information Cologne
3 General Linguistics University of Cologne
May 21 2008
Abstract We describe a modular system for generating sentences from formal
denitions of underlying linguistic structures using domain-specific languages The
system uses Java in general Prolog for lexical entries and custom domain-specic
languages based on Functional Grammar and Functional Discourse Grammar no-
tation implemented using the ANTLR parser generator We show how linguistic
and technological parts can be brought together in a natural language processing
system and how domain-specic languages can be used as a tool for consistent
formal notation in linguistic description
1 Motivation and Overview
This paper describes a system for generating sentences using domain-specic
languages DSL see section 3 for the formal representation of underlying
linguistic structures and lexical entries4 The DSL implemented for under-
lying structures is based on representations in Functional Grammar FG
Dik 1997 The grammar module and the lexicon are based on a revised and
extended version of the implementation described in Samuelsdor 1989
To evaluate the exibility of our approach we also implemented domain-
specic languages for formal representations in Functional Discourse Gram-
mer FDG which as FG explicitly demands formal rigor Hengeveld and
Mackenzie 2006668 Creating a computational implementation is a valu-
able evaluation tool for linguistic theories in general cf Bakker 19944
By actually generating linguistic expressions from representations used in a
linguistic theory an implementation can be used to evaluate and improve
representational aspects of the theory
4 The described implementation and infrastructure for collaborative development are available
online httpfgramsourceforgenet
2 System Architecture
The system consists of individual exchangeable modules for creating an un-
derlying structure processing that input and generating a linguistic expres-
sion from the input cf Fig 1 for an overview of the system architecture In
the input module an underlying structure is created edited and evaluated
The input is sent to the processing module which communicates with the
grammar module When the generation is done the user interface displays
either the result of the evaluation namely the linguistic expression gener-
ated from the input or an error message cf Fig 3 for sample output of the
console-based implementation of the input module The system architecture
can be characterized as a three-tier architecture Eckerson 1995
Such a modular approach has two main advantages First modules can
be exchanged for instance the input module is implemented both as a desk-
top application and as a web-based user interface with the actual processing
happening on a server implemented using Java Server Pages on a Tomcat
servlet container Second individual modules of our system can be com-
bined with other natural language processing NLP components and so be
reused in new contexts
3 Domain-Specic Languages
The usage of languages which are tailored for a specic domain domain-
specic languages DSL has a long tradition in computing eg for cong-
uration les and has been acknowledged as a best practice in recent years
cf Hunt and Thomas 1999 Domain-specic languages are also a central
aspect of a programming paradigm called language-oriented programming
cf Ward 2003
Our system uses Java as a general-purpose language Prolog as a DSL
for lexical entries and expression rules see section 43 cf Macks 2002 for
a similar usage of Prolog and a custom DSL for describing underlying
structures implemented using ANTLR a tool for dening and processing
domain-specic languages Parr 2007 httpwwwantlrorg While eg
in the domain of banking a DSL might describe credit rules a linguist work-
ing with a model like FDG uses a DSL for linguistic description in particular
for the formal notation of underlying linguistic structures With ANTLR
Fig 1 System architecture
d1xmanNhappyAProcessing ModuleGrammar ModuleInputModuleDisplay ResultCreate InputProcess Prolog ReprGenerate Ling ExprProcess InputProcess ResultThe happy man Access LexiconApply Expr RulesProlog representation of the inputJavaJavaANTLRProlog representation of the resultPrologthe form of the DSL is dened using a notation based on the Extended
Backus-Naur Form EBNF cf Wirth 1977 see Fig 6 for the format used
by ANTLR From that grammar denition a Java parser that can process
the DSL is automatically generated by ANTLR
4 Linguistic Structures
41 Structures in Functional Grammar
The processing modules input format is a representation of the linguis-
tic expression to be generated cf Fig 2 and 3 its form is based on the
representation of underlying structures given in Dik 1997 The processing
module parses the input entered by the user and creates an internal object
representation cf Fig 4 This is then converted into the output format
of the processing module a Prolog representation of the input cf Fig 5
which is used by the grammar module cf section 43 The mapping of the
values used in the Prolog representation to those used in the input structure
like m to plural  is done in a Java properties le and therefore allows for
conguration of the formal aspects of the input which uses eg m inde-
pendently of the implementation code that generates the expression which
uses eg plural 
Past e
d1xmanN
Past Pf egiveV
d1xmaryNAg
dmxbookNoldAGo
xmanNRecSubj
d1xjohnN0
Fig 2 A nested underlying structure in Functional Grammar based on Dik
1997 which is parsable by the generated ANTLR v2 parser rep-
resents John is the man who was given the old book by Mary
 eloveVxmanNAgSubj xwomanNGoObj
The man loves the woman
 Past pf egiveV
dmxfarmerNoldAAgSubj
imxducklingNsoftAGoObj
dmxwomanNyoungARec
The old farmers had given soft ducklings to the young women
Fig 3 Sample output of the console-based implementation of the input
module a linguistic structure conforming to Functional Grammar
notation is entered at the prompt cid29 for which the linguistic ex-
pression is generated using the linguistic knowledge in the grammar
Fig 4 Internal representation of the second structure in Fig 3 represents
The old farmers had given soft ducklings to the young women a
tree of Java objects in UML notation
lexeme  givetense  pastNode x1Predicatelexeme  farmermodif  oldNode x2Termlexeme  ducklingmodif  softNode x3Termlexeme  womanmodif  youngNode x4Termnodex1 0 nodex2 1
nodex3 1 nodex4 1
propclause illocution decl
propclause type mainclause
propx1 type pred
propx1 tense past
propx1 perfect true
propx1 progressive false
propx1 mode ind
propx1 voice active
propx1 subnodes x2 x3 x4
propx1 lex give
propx1 nav V
propx1 det def
propx2 type term
propx2 role agent
propx2 relation subject
propx2 proper false
propx2 pragmatic null
propx2 num plural
propx2 modifs old
propx2 lex farmer
propx2 nav N
propx2 det def
propx3 type term
propx3 role goal
propx3 relation object
propx3 proper false
propx3 pragmatic null
propx3 num plural
propx3 modifs soft
propx3 lex duckling
propx3 nav N
propx3 det indef
propx4 type term
propx4 role recipient
propx4 relation restarg
propx4 proper false
propx4 pragmatic null
propx4 num plural
propx4 modifs young
propx4 lex woman
propx4 nav N
propx4 det def
Fig 5 Prolog representation of the second structure in Fig 3 which is
generated from the object representation in Fig 4 and used to create
the linguistic expression The old farmers had given soft ducklings to
the young women in the grammar module cf section 43
42 Structures in Functional Discourse Grammar
To evaluate the exibility of our approach we implemented grammars for
structures on the Representational Level RL and the Interpersonal Level
IL in Functional Discourse Grammar FDG Hengeveld and Mackenzie
2006 the successor theory of FG Fig 6 shows the grammar for structures
on the RL from which a parser is generated that can parse expressions like
the structure in Fig 7 into a structure as in Fig 8
grammar Representational
  OPERATOR p X   head  p X    FUNCTION 
content
  OPERATOR e X   head  e X    FUNCTION 
soaffairs
property
  OPERATOR f X   head  f X    FUNCTION 
individual   OPERATOR x X   head  x X    FUNCTION 
location
  OPERATOR l X   head  l X    FUNCTION 
  OPERATOR t X   head  t X    FUNCTION 
 LEMMA  
 soaffairs
 property
 individual
 location
 time     
FUNCTION
 Ag
 Pat
 Inst  etc
OPERATOR
 Past
 Pres  etc
 az 
 09 
Fig 6 Complete ANTLR v3 grammar for structures on the Represen-
tational Level in Functional Discourse Grammar which describe
nested structures as in Fig 7 each head element can take dier-
ent forms content soaairs property individual location time
which themselves contain a head element again
Past e1
f1tek
x1imx1Ag
x2naifx2Inst
f2kot
x1imx1Ag
x3mix3Pat
Fig 7 Underlying structure of a serial verb construction in Jamaican Creole
for im tek naif kot mi He cut me with a knife Patrick 2004290
on the Representational Level in Functional Discourse Grammar
which is parsable by the parser generated from the rules in Fig 6
This representation is based on our analysis of the serial verb con-
struction as a single event which can be backed by native speaker
intuition and semantic analysis Durie 1997291 an analysis of a se-
rial verb construction with two events as given in Example 2 of van
Staden 2006 can also be represented using the domain-specic lan-
guage while variations in the formal structure would be recognized
as invalid
Fig 8 Part of the parse tree the parser generated from the rules in Fig 6
produces for the structure in Fig 7
An ANTLR grammar denition like this provides a validator for the
formal structure of RL representations and can be used with a tool like
ANTLRWorks httpwwwantlrorgworks to analyse these represen-
tations Having an internal representation of the input cf Fig 8 alter-
native processing to the creation of the corresponding linguistic expression
as have described for FG structures in section 41 is feasible like output
of typeset representations of underlying structures in dierent formats This
would allow the representation used for publication eg with subscript index
numbers with or without indentation etc to be created from the formal
validated representation
43 Lexical Entries
In the grammar module the Prolog representation of the input generated by
the processing module cf Fig 5 is used to generate a linguistic expression
Prolog oers convenient notation and processing mechanisms eg lexical
entries can be stored directly as Prolog facts cf Fig 9 Prolog also has
a particular strong standing as an implementation language for FG eg
Connolly 1986 Samuelsdor 1989 Dik 1992 By restricting the usage of
Prolog to the grammar module and combining5 it with other languages
instead of using it as a general-purpose programming language for the entire
program we use Prolog as a DSL in one of its original domains
The expression rules and the lexicon are based on a revised and extended
version of the implementation described in Samuelsdor 1989 To make
the implementation work as a module in the described system the user
dialog of the original version in which the underlying structure is built step
by step was replaced by the formal representation that is created in the
input module and converted into a Prolog representation by the processing
module cf section 41 This resembles the shift to a top-down organization
Hengeveld and Mackenzie 2006668 in FDG where the conceptualization
is the rst step not the selection of lexical elements as it was in FG and in
the implementation described in Samuelsdor 1989
calling Prolog from Java we use
Interprolog httpwwwdeclarativacom
interprolog The Prolog implementation we use is SWI-Prolog httpwwwswi-prolog
believe
regular regular
experiencer human X1
goal proposition X2
action
gave given
agent animate X1
goal any X2
recipient animate X3
Fig 9 Transitive and ditransitive verbs as Prolog facts in the lexicon
5 Conclusion
We described a modular implementation of a language generation system
representing underlying structures and lexical entries using domain-specic
languages DSL The system makes use of an input format based on Dik
1997 and consists of modules implemented in Java Prolog and ANTLR6
As a rst result this shows that a DSL can be used as a very exible linguistic
expert front-end to a knowledge base in a dierent language as we have
shown in section 41 for underlying clause structures based on Functional
Grammar that use a Prolog knowledge base We believe this is a promising
way how domain-specic linguistic knowledge can be applied in a natural
language processing system
As all structures in FG and FDG as well as the lexical entries which
are Prolog facts in our system have a common tree structure a unied
implementation using ANTLR to dene and process all these structures in
the same manner as implemented and described for RL representations is
feasible So as a second result this shows that the concept of a DSL is exible
enough to be applied for newer developments in linguistic theory as we have
shown for structures on the Representational Level in Functional Discourse
Grammar in section 42 as well as for extensions of these as we have shown
for structures describing lexical entries in section 43 Therefore domain-
specic languages can be used as a tool for consistent formal notation in
linguistic description In our view this encourages the implementation of a
6 ANTLR allows further processing in dierent target languages including Java C C C
Objective-C Python and Ruby
full set of grammars for all the structures a linguist creates in linguistic
description which could be the core of software tools that would allow a
linguist to create linguistic representations like a programmer writes code
a mathematician writes formulas or a musician writes notes as something
that can actually be validated and even executed in a reproducible manner
References
Bakker D 1994 Formal and Computational Aspects of Functional Gram-
mar and Language Typology PhD thesis Universiteit van Amsterdam
Connolly J H 1986 Testing functional grammar placement rules using
prolog International Journal of Man-Machine Studies 246623632 9
Dik S C 1992 Functional Grammar in Prolog an Integrated Implemen-
tation for English French and Dutch Mouton de Gruyter Berlin New
York 9
Dik S C 1997 The Theory of Functional Grammar Part 1 The Structure
of the Clause edited by Kees Hengeveld Mouton de Gruyter Berlin
second edition 1 4 10
Durie M 1997 Grammatical structures in verb serialization In Alsina
A Bresnan J and Sells P editors Complex Predicates Center for the
Study of Language and Information Stanford CA USA 8
Eckerson W W 1995 Three tier clientserver architecture Achieving
scalability performance and eciency in client server applications Open
Information Systems 101 2
Hengeveld K and Mackenzie L J 2006 Functional discourse grammar
In Brown K editor Encyclopedia of Language and Linguistics pages
668676 Elsevier Oxford second edition 1 7 9
Hunt A and Thomas D 1999 The Pragmatic Programmer From Jour-
neyman to Master Addison-Wesley Professional 2
Macks A 2002 Parsing akkadian verbs with prolog In Proceedings of
the ACL-02 workshop on Computational approaches to semitic languages
pages 16 2
Parr T 2007 The Denitive ANTLR Reference Building Domain-Specic
Languages The Pragmatic Bookshelf Raleigh 2
Patrick P 2004 Jamaican creole Morphology and syntax In Kortmann
B Schneider E W Upton C Mesthrie R and Burridge K editors
A Handbook of Varieties of English Vol 2 Morphology and Syntax Topics
in English Linguistics pages 407438 Mouton de Gruyter Berlin  New
York 8
Samuelsdor P O 1989 Simulation of a functional grammar in prolog
In Connolly J H and Dik S C editors Functional Grammar and the
Computer pages 2944 De Gruyter 1 9
van Staden M 2006 Papuan narratives in functional discourse grammar
Poster presented at the Eleventh Biennial Symposium Intertheoretical
Approaches to Complex Verb Constructions Houston Rice University 8
Ward M 2003 Language oriented programming Science Labs Durham
Wirth N 1977 What can we do about the unnecessary diversity of nota-
tion for syntactic denitions Commun ACM 2011822823 4
Computational Representation of Linguistic
Structures using Domain-Specic Languages
Fabian Steeg1 Christoph Benden2  Paul O Samuelsdor3
1 Computer Science for the Humanities University of Cologne
2 German Institute of Medical Documentation and Information Cologne
3 General Linguistics University of Cologne
May 21 2008
Abstract We describe a modular system for generating sentences from formal
denitions of underlying linguistic structures using domain-specific languages The
system uses Java in general Prolog for lexical entries and custom domain-specic
languages based on Functional Grammar and Functional Discourse Grammar no-
tation implemented using the ANTLR parser generator We show how linguistic
and technological parts can be brought together in a natural language processing
system and how domain-specic languages can be used as a tool for consistent
formal notation in linguistic description
1 Motivation and Overview
This paper describes a system for generating sentences using domain-specic
languages DSL see section 3 for the formal representation of underlying
linguistic structures and lexical entries4 The DSL implemented for under-
lying structures is based on representations in Functional Grammar FG
Dik 1997 The grammar module and the lexicon are based on a revised and
extended version of the implementation described in Samuelsdor 1989
To evaluate the exibility of our approach we also implemented domain-
specic languages for formal representations in Functional Discourse Gram-
mer FDG which as FG explicitly demands formal rigor Hengeveld and
Mackenzie 2006668 Creating a computational implementation is a valu-
able evaluation tool for linguistic theories in general cf Bakker 19944
By actually generating linguistic expressions from representations used in a
linguistic theory an implementation can be used to evaluate and improve
representational aspects of the theory
4 The described implementation and infrastructure for collaborative development are available
online httpfgramsourceforgenet
2 System Architecture
The system consists of individual exchangeable modules for creating an un-
derlying structure processing that input and generating a linguistic expres-
sion from the input cf Fig 1 for an overview of the system architecture In
the input module an underlying structure is created edited and evaluated
The input is sent to the processing module which communicates with the
grammar module When the generation is done the user interface displays
either the result of the evaluation namely the linguistic expression gener-
ated from the input or an error message cf Fig 3 for sample output of the
console-based implementation of the input module The system architecture
can be characterized as a three-tier architecture Eckerson 1995
Such a modular approach has two main advantages First modules can
be exchanged for instance the input module is implemented both as a desk-
top application and as a web-based user interface with the actual processing
happening on a server implemented using Java Server Pages on a Tomcat
servlet container Second individual modules of our system can be com-
bined with other natural language processing NLP components and so be
reused in new contexts
3 Domain-Specic Languages
The usage of languages which are tailored for a specic domain domain-
specic languages DSL has a long tradition in computing eg for cong-
uration les and has been acknowledged as a best practice in recent years
cf Hunt and Thomas 1999 Domain-specic languages are also a central
aspect of a programming paradigm called language-oriented programming
cf Ward 2003
Our system uses Java as a general-purpose language Prolog as a DSL
for lexical entries and expression rules see section 43 cf Macks 2002 for
a similar usage of Prolog and a custom DSL for describing underlying
structures implemented using ANTLR a tool for dening and processing
domain-specic languages Parr 2007 httpwwwantlrorg While eg
in the domain of banking a DSL might describe credit rules a linguist work-
ing with a model like FDG uses a DSL for linguistic description in particular
for the formal notation of underlying linguistic structures With ANTLR
Fig 1 System architecture
d1xmanNhappyAProcessing ModuleGrammar ModuleInputModuleDisplay ResultCreate InputProcess Prolog ReprGenerate Ling ExprProcess InputProcess ResultThe happy man Access LexiconApply Expr RulesProlog representation of the inputJavaJavaANTLRProlog representation of the resultPrologthe form of the DSL is dened using a notation based on the Extended
Backus-Naur Form EBNF cf Wirth 1977 see Fig 6 for the format used
by ANTLR From that grammar denition a Java parser that can process
the DSL is automatically generated by ANTLR
4 Linguistic Structures
41 Structures in Functional Grammar
The processing modules input format is a representation of the linguis-
tic expression to be generated cf Fig 2 and 3 its form is based on the
representation of underlying structures given in Dik 1997 The processing
module parses the input entered by the user and creates an internal object
representation cf Fig 4 This is then converted into the output format
of the processing module a Prolog representation of the input cf Fig 5
which is used by the grammar module cf section 43 The mapping of the
values used in the Prolog representation to those used in the input structure
like m to plural  is done in a Java properties le and therefore allows for
conguration of the formal aspects of the input which uses eg m inde-
pendently of the implementation code that generates the expression which
uses eg plural 
Past e
d1xmanN
Past Pf egiveV
d1xmaryNAg
dmxbookNoldAGo
xmanNRecSubj
d1xjohnN0
Fig 2 A nested underlying structure in Functional Grammar based on Dik
1997 which is parsable by the generated ANTLR v2 parser rep-
resents John is the man who was given the old book by Mary
 eloveVxmanNAgSubj xwomanNGoObj
The man loves the woman
 Past pf egiveV
dmxfarmerNoldAAgSubj
imxducklingNsoftAGoObj
dmxwomanNyoungARec
The old farmers had given soft ducklings to the young women
Fig 3 Sample output of the console-based implementation of the input
module a linguistic structure conforming to Functional Grammar
notation is entered at the prompt cid29 for which the linguistic ex-
pression is generated using the linguistic knowledge in the grammar
Fig 4 Internal representation of the second structure in Fig 3 represents
The old farmers had given soft ducklings to the young women a
tree of Java objects in UML notation
lexeme  givetense  pastNode x1Predicatelexeme  farmermodif  oldNode x2Termlexeme  ducklingmodif  softNode x3Termlexeme  womanmodif  youngNode x4Termnodex1 0 nodex2 1
nodex3 1 nodex4 1
propclause illocution decl
propclause type mainclause
propx1 type pred
propx1 tense past
propx1 perfect true
propx1 progressive false
propx1 mode ind
propx1 voice active
propx1 subnodes x2 x3 x4
propx1 lex give
propx1 nav V
propx1 det def
propx2 type term
propx2 role agent
propx2 relation subject
propx2 proper false
propx2 pragmatic null
propx2 num plural
propx2 modifs old
propx2 lex farmer
propx2 nav N
propx2 det def
propx3 type term
propx3 role goal
propx3 relation object
propx3 proper false
propx3 pragmatic null
propx3 num plural
propx3 modifs soft
propx3 lex duckling
propx3 nav N
propx3 det indef
propx4 type term
propx4 role recipient
propx4 relation restarg
propx4 proper false
propx4 pragmatic null
propx4 num plural
propx4 modifs young
propx4 lex woman
propx4 nav N
propx4 det def
Fig 5 Prolog representation of the second structure in Fig 3 which is
generated from the object representation in Fig 4 and used to create
the linguistic expression The old farmers had given soft ducklings to
the young women in the grammar module cf section 43
42 Structures in Functional Discourse Grammar
To evaluate the exibility of our approach we implemented grammars for
structures on the Representational Level RL and the Interpersonal Level
IL in Functional Discourse Grammar FDG Hengeveld and Mackenzie
2006 the successor theory of FG Fig 6 shows the grammar for structures
on the RL from which a parser is generated that can parse expressions like
the structure in Fig 7 into a structure as in Fig 8
grammar Representational
  OPERATOR p X   head  p X    FUNCTION 
content
  OPERATOR e X   head  e X    FUNCTION 
soaffairs
property
  OPERATOR f X   head  f X    FUNCTION 
individual   OPERATOR x X   head  x X    FUNCTION 
location
  OPERATOR l X   head  l X    FUNCTION 
  OPERATOR t X   head  t X    FUNCTION 
 LEMMA  
 soaffairs
 property
 individual
 location
 time     
FUNCTION
 Ag
 Pat
 Inst  etc
OPERATOR
 Past
 Pres  etc
 az 
 09 
Fig 6 Complete ANTLR v3 grammar for structures on the Represen-
tational Level in Functional Discourse Grammar which describe
nested structures as in Fig 7 each head element can take dier-
ent forms content soaairs property individual location time
which themselves contain a head element again
Past e1
f1tek
x1imx1Ag
x2naifx2Inst
f2kot
x1imx1Ag
x3mix3Pat
Fig 7 Underlying structure of a serial verb construction in Jamaican Creole
for im tek naif kot mi He cut me with a knife Patrick 2004290
on the Representational Level in Functional Discourse Grammar
which is parsable by the parser generated from the rules in Fig 6
This representation is based on our analysis of the serial verb con-
struction as a single event which can be backed by native speaker
intuition and semantic analysis Durie 1997291 an analysis of a se-
rial verb construction with two events as given in Example 2 of van
Staden 2006 can also be represented using the domain-specic lan-
guage while variations in the formal structure would be recognized
as invalid
Fig 8 Part of the parse tree the parser generated from the rules in Fig 6
produces for the structure in Fig 7
An ANTLR grammar denition like this provides a validator for the
formal structure of RL representations and can be used with a tool like
ANTLRWorks httpwwwantlrorgworks to analyse these represen-
tations Having an internal representation of the input cf Fig 8 alter-
native processing to the creation of the corresponding linguistic expression
as have described for FG structures in section 41 is feasible like output
of typeset representations of underlying structures in dierent formats This
would allow the representation used for publication eg with subscript index
numbers with or without indentation etc to be created from the formal
validated representation
43 Lexical Entries
In the grammar module the Prolog representation of the input generated by
the processing module cf Fig 5 is used to generate a linguistic expression
Prolog oers convenient notation and processing mechanisms eg lexical
entries can be stored directly as Prolog facts cf Fig 9 Prolog also has
a particular strong standing as an implementation language for FG eg
Connolly 1986 Samuelsdor 1989 Dik 1992 By restricting the usage of
Prolog to the grammar module and combining5 it with other languages
instead of using it as a general-purpose programming language for the entire
program we use Prolog as a DSL in one of its original domains
The expression rules and the lexicon are based on a revised and extended
version of the implementation described in Samuelsdor 1989 To make
the implementation work as a module in the described system the user
dialog of the original version in which the underlying structure is built step
by step was replaced by the formal representation that is created in the
input module and converted into a Prolog representation by the processing
module cf section 41 This resembles the shift to a top-down organization
Hengeveld and Mackenzie 2006668 in FDG where the conceptualization
is the rst step not the selection of lexical elements as it was in FG and in
the implementation described in Samuelsdor 1989
calling Prolog from Java we use
Interprolog httpwwwdeclarativacom
interprolog The Prolog implementation we use is SWI-Prolog httpwwwswi-prolog
believe
regular regular
experiencer human X1
goal proposition X2
action
gave given
agent animate X1
goal any X2
recipient animate X3
Fig 9 Transitive and ditransitive verbs as Prolog facts in the lexicon
5 Conclusion
We described a modular implementation of a language generation system
representing underlying structures and lexical entries using domain-specic
languages DSL The system makes use of an input format based on Dik
1997 and consists of modules implemented in Java Prolog and ANTLR6
As a rst result this shows that a DSL can be used as a very exible linguistic
expert front-end to a knowledge base in a dierent language as we have
shown in section 41 for underlying clause structures based on Functional
Grammar that use a Prolog knowledge base We believe this is a promising
way how domain-specic linguistic knowledge can be applied in a natural
language processing system
As all structures in FG and FDG as well as the lexical entries which
are Prolog facts in our system have a common tree structure a unied
implementation using ANTLR to dene and process all these structures in
the same manner as implemented and described for RL representations is
feasible So as a second result this shows that the concept of a DSL is exible
enough to be applied for newer developments in linguistic theory as we have
shown for structures on the Representational Level in Functional Discourse
Grammar in section 42 as well as for extensions of these as we have shown
for structures describing lexical entries in section 43 Therefore domain-
specic languages can be used as a tool for consistent formal notation in
linguistic description In our view this encourages the implementation of a
6 ANTLR allows further processing in dierent target languages including Java C C C
Objective-C Python and Ruby
full set of grammars for all the structures a linguist creates in linguistic
description which could be the core of software tools that would allow a
linguist to create linguistic representations like a programmer writes code
a mathematician writes formulas or a musician writes notes as something
that can actually be validated and even executed in a reproducible manner
References
Bakker D 1994 Formal and Computational Aspects of Functional Gram-
mar and Language Typology PhD thesis Universiteit van Amsterdam
Connolly J H 1986 Testing functional grammar placement rules using
prolog International Journal of Man-Machine Studies 246623632 9
Dik S C 1992 Functional Grammar in Prolog an Integrated Implemen-
tation for English French and Dutch Mouton de Gruyter Berlin New
York 9
Dik S C 1997 The Theory of Functional Grammar Part 1 The Structure
of the Clause edited by Kees Hengeveld Mouton de Gruyter Berlin
second edition 1 4 10
Durie M 1997 Grammatical structures in verb serialization In Alsina
A Bresnan J and Sells P editors Complex Predicates Center for the
Study of Language and Information Stanford CA USA 8
Eckerson W W 1995 Three tier clientserver architecture Achieving
scalability performance and eciency in client server applications Open
Information Systems 101 2
Hengeveld K and Mackenzie L J 2006 Functional discourse grammar
In Brown K editor Encyclopedia of Language and Linguistics pages
668676 Elsevier Oxford second edition 1 7 9
Hunt A and Thomas D 1999 The Pragmatic Programmer From Jour-
neyman to Master Addison-Wesley Professional 2
Macks A 2002 Parsing akkadian verbs with prolog In Proceedings of
the ACL-02 workshop on Computational approaches to semitic languages
pages 16 2
Parr T 2007 The Denitive ANTLR Reference Building Domain-Specic
Languages The Pragmatic Bookshelf Raleigh 2
Patrick P 2004 Jamaican creole Morphology and syntax In Kortmann
B Schneider E W Upton C Mesthrie R and Burridge K editors
A Handbook of Varieties of English Vol 2 Morphology and Syntax Topics
in English Linguistics pages 407438 Mouton de Gruyter Berlin  New
York 8
Samuelsdor P O 1989 Simulation of a functional grammar in prolog
In Connolly J H and Dik S C editors Functional Grammar and the
Computer pages 2944 De Gruyter 1 9
van Staden M 2006 Papuan narratives in functional discourse grammar
Poster presented at the Eleventh Biennial Symposium Intertheoretical
Approaches to Complex Verb Constructions Houston Rice University 8
Ward M 2003 Language oriented programming Science Labs Durham
Wirth N 1977 What can we do about the unnecessary diversity of nota-
tion for syntactic denitions Commun ACM 2011822823 4
